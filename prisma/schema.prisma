generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Roles {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(20)
  description String?  @db.VarChar(100)

  users User_basic[]
}

model User_basic {
  id         String    @id @default(uuid())
  roleId     String
  email      String    @unique @db.VarChar(150)
  fullName   String    @db.VarChar(150)
  avatarUrl  String?   @db.VarChar(255)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  role      Roles     @relation(fields: [roleId], references: [id])
  customer  Customers?
  vendor    Vendors?
}

model Customers {
  // id          String   @id @default(uuid())
  userId      String   @unique
  paymentMethod String @db.VarChar(50)
  address     String   @db.VarChar(255)

  user      User_basic @relation(fields: [userId], references: [id])
  reviews   Review[]
}

model Vendors {
  // id        String    @id @default(uuid())
  userId    String    @unique
  storeId   String    @unique
  description String? @db.Text

  user      User_basic @relation(fields: [userId], references: [id])
  store     Store     @relation(fields: [storeId], references: [id])
}

model Store {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(150)
  description    String?          @db.Text
  images         Images[]
  characteristics Characteristics[]
  address        String           @db.VarChar(255)
  location       String           @db.VarChar(255)
  number         String?          @db.VarChar(20)
  attentionHours String?          @db.VarChar(100)
  categoryId     String
  rating         Float?

  category   Category          @relation(fields: [categoryId], references: [id])
  reviews    Review[]
  vendor     Vendors?
}

model Category {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(150)
  description String?   @db.Text
  createdAt   DateTime  @default(now())

  stores      Store[]
}

model Images {
  id        String    @id @default(uuid())
  storeId   String
  imgUrl    String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  store     Store     @relation(fields: [storeId], references: [id])
}

model Review {
  id                 String   @id @default(uuid())
  customerId         String
  storeId            String
  stars              Int      @db.SmallInt
  comment            String?  @db.Text
  reviewCharacteristicsId String?

  customer           Customers @relation(fields: [customerId], references: [userId])
  store              Store     @relation(fields: [storeId], references: [id])
  reviewCharacteristics ReviewCharacteristics? @relation(fields: [reviewCharacteristicsId], references: [id])
}

model ReviewCharacteristics {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(150)
  description String?  @db.Text
  createdAt   DateTime @default(now())

  reviews     Review[]
}

model Characteristics {
  id          String   @id @default(uuid())
  storeId     String
  name        String   @db.VarChar(150)
  description String?  @db.Text
  createdAt   DateTime @default(now())

  store     Store     @relation(fields: [storeId], references: [id])
}

