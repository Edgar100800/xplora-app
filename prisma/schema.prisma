generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserType {
  ADMIN
  VENDOR
  CUSTOMER
}

model Role {
  id          String   @id @default(uuid()) @map("id")
  name        String   @db.VarChar(20) @unique
  description String?  @db.VarChar(100)
  type        UserType @unique

  users UserBasic[]
}

model UserBasic {
  id          String    @id @default(uuid())
  role_id     String
  email       String    @unique @db.VarChar(150)
  full_name   String    @db.VarChar(150)
  avatar_url  String?   @db.VarChar(255)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  role        Role      @relation(fields: [role_id], references: [id])
  customer    Customer?
  vendor      Vendor?
}

model Customer {
  user_id       String   @id @unique
  payment_method String?  @db.VarChar(50)
  address       String?   @db.VarChar(255)

  user          UserBasic @relation(fields: [user_id], references: [id])
  reviews       Review[]
}

model Vendor {
  user_id     String    @id @unique
  store_id    String    @unique
  description String?  @db.Text

  user        UserBasic @relation(fields: [user_id], references: [id])
  store       Store     @relation(fields: [store_id], references: [id])
}

model Store {
  id                String           @id @default(uuid())
  name              String           @db.VarChar(150)
  description       String?          @db.Text
  images            Image[]
  characteristics   Characteristic[]
  address           String           @db.VarChar(255)
  location          String           @db.VarChar(255)
  number            String?          @db.VarChar(20)
  attention_hours   String?          @db.VarChar(100)
  category_id       String
  rating            Float?

  category          Category         @relation(fields: [category_id], references: [id])
  reviews           Review[]
  vendor            Vendor?
}

model Category {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(150)
  description String?   @db.Text
  created_at  DateTime  @default(now())

  stores      Store[]
}

model Image {
  id          String    @id @default(uuid())
  store_id    String
  img_url     String    @db.VarChar(255)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  store       Store     @relation(fields: [store_id], references: [id])
}

model Review {
  id                        String   @id @default(uuid())
  customer_id               String
  store_id                  String
  stars                     Int      @db.SmallInt
  comment                   String?  @db.Text
  review_characteristics_id String?

  customer                  Customer @relation(fields: [customer_id], references: [user_id])
  store                     Store    @relation(fields: [store_id], references: [id])
  review_characteristics    ReviewCharacteristic? @relation(fields: [review_characteristics_id], references: [id])
}

model ReviewCharacteristic {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(150)
  description String?  @db.Text
  created_at  DateTime @default(now())

  reviews     Review[]
}

model Characteristic {
  id          String   @id @default(uuid())
  store_id    String
  name        String   @db.VarChar(150)
  description String?  @db.Text
  created_at  DateTime @default(now())

  store       Store    @relation(fields: [store_id], references: [id])
}